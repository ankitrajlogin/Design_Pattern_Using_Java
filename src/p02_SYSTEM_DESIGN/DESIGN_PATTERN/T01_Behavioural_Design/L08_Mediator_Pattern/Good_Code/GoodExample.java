package p02_SYSTEM_DESIGN.DESIGN_PATTERN.T01_Behavioural_Design.L08_Mediator_Pattern.Good_Code;

/*
âœ… With a mediator (ATC tower):
- Airplanes donâ€™t talk to each other directly.
- They communicate only with the ATC tower, which acts as the mediator.
- ATC decides which plane can take off or land.


ðŸ”‘ Components of Mediator Pattern in this Example:
1. Mediator (Interface) â†’ Defines communication methods.
    Example: AirTrafficControl

2. Concrete Mediator â†’ Implements the logic of coordination.
    Example: ATCMediator

3. Colleague (Component) â†’ Objects that want to communicate.
    Example: Airplane

4. Concrete Colleagues â†’ Specific implementations of colleagues.
    Example: Flight101, Flight202

 */

/*
âš™ Steps to Implement Mediator Pattern:
1. Identify communication chaos (too many objects talking directly).
2. Create Mediator Interface â†’ defines communication methods.
3. Create Concrete Mediator â†’ centralizes communication logic.
4. Update Colleagues (components) â†’ only talk to mediator, not each other.
5. Use mediator in client â†’ keeps system loosely coupled.
 */


// Mediator Interface
interface AirTrafficeControl{
    void requestTakeOff(Airplane airplane) ;
    void notifyRunwayFree() ;
}

// Concrete Mediator
class ATCMediator implements AirTrafficeControl{
    private boolean runwayFree = true ;

    @Override
    public void requestTakeOff(Airplane airplane){
        if(runwayFree){
            System.out.println(airplane.getName() + " is taking off");
            runwayFree = false ;
        }
        else{
            System.out.println(airplane.getName() + " waiting , runway is busy");
        }
    }

    @Override
    public void notifyRunwayFree(){
        System.out.println("Runway is now free.");
        runwayFree = true ;
    }

}

// Collegaue
class Airplane{
    private String name ;
    private AirTrafficeControl atcMediator ;

    public Airplane(String name , AirTrafficeControl mediator){
        this.name = name ;
        this.atcMediator = mediator ;
    }

    public String getName(){
        return name ;
    }

    public void requestTakeOff(){
        atcMediator.requestTakeOff(this) ;
    }

    public void finishedTakeOff(){
        System.out.println(name + " has finished taking off");
        atcMediator.notifyRunwayFree();
    }
}



public class GoodExample {
    public static void main(String[] args){
        ATCMediator atc = new ATCMediator() ;

        Airplane plane1 = new Airplane("Flight 101" , atc) ;
        Airplane plane2 = new Airplane("Flight 202" , atc) ;

        plane1.requestTakeOff();
        plane2.requestTakeOff();
        plane1.finishedTakeOff();
        plane2.requestTakeOff();
    }
}


/*
âœ¨ Why This is Better?
    - Loose coupling: Airplanes donâ€™t know about each other.
    - Centralized control: ATC manages rules for takeoff/landing.
    - Easier to extend: Add 10 more airplanes â†’ no changes in existing ones.
    - Real-world analogy: Works exactly like real air traffic control.
 */
