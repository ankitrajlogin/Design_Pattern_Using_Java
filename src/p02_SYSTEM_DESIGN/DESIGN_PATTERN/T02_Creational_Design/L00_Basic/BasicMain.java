package p02_SYSTEM_DESIGN.DESIGN_PATTERN.T02_Creational_Design.L00_Basic;


/*
Creational Design Patterns
- Creational design patterns deal with object creation mechanisms. Instead of creating objects directly using the new keyword everywhere, these patterns give us flexible and reusable ways to create objects.

ðŸ’¡ Problem: If we hardcode new everywhere, the code becomes tightly coupled, less reusable, and harder to extend.
ðŸ’¡ Solution: Creational patterns abstract how objects are created, so the system can be more scalable, reusable, and maintainable.
 */

/*
ðŸ”¹ Why do we use them? (Importance)
 - Encapsulation of object creation â†’ Client code does not need to know the exact class name.
 - Reduce coupling â†’ Objects are created in a centralized way.
 - Flexibility â†’ Easily swap, extend, or change object creation logic.
 - Control â†’ Can enforce rules on how and when objects are created (e.g., singleton).
 */


/*
Types of Creational Patterns
1. Singleton â†’ Only one instance of a class should exist.
2. Factory Method â†’ A superclass defines a method for creating objects, but subclasses decide which object to create.
3. Abstract Factory â†’ Provides an interface for creating families of related objects without specifying exact classes.
4. Builder â†’ Step-by-step construction of complex objects.
5. Prototype â†’ Clone objects instead of creating new ones from scratch.
 */


public class BasicMain {

}
