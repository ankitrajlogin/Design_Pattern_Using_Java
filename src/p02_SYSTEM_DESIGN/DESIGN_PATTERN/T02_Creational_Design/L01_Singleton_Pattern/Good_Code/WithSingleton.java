package p02_SYSTEM_DESIGN.DESIGN_PATTERN.T02_Creational_Design.L01_Singleton_Pattern.Good_Code;

/*
ðŸ§© Components of Singleton Pattern
Singleton Class â†’ the class itself (e.g., Logger).
Private Constructor â†’ prevents multiple objects.
Static Instance â†’ stores the only object.
Global Access Method â†’ getInstance() method.
 */

/*
ðŸ”„ Steps to Implement Singleton
1. Private static instance of the class.
2. Private constructor (to stop new Class() outside).
3. Public static method (getInstance()) to provide access.
4. Optional: Make it Thread-Safe if in multithreaded environment.
 */

class AppSettings{
    private String databaseUrl ;
    private String apikey ;

    // step 1 : private static instance
    private static AppSettings instance ;

    // step 2 : private constructor
    private AppSettings(){
        this.databaseUrl = "jdbc:mysql://localhost:3306/mydb" ;
        this.apikey = "12345-ABCDE" ;
    }

    // step 3 : public static method to get instance
    public static AppSettings getInstance(){
        if(instance  == null){
            instance = new AppSettings() ;
        }

        return instance ;
    }

    public String getDatabaseUrl(){
        return databaseUrl ;
    }

    public String getApikey(){
        return apikey ;
    }

    //    To prevent cloning of a Singleton object, you need to override the clone() method inside your Singleton class and throw an exception.
    protected AppSettings clone() throws CloneNotSupportedException {
        throw new CloneNotSupportedException("Cloning of this singleton is not allowed");
    }
}

public class WithSingleton {
    public static void main(String[] args) {
        AppSettings settings1 = AppSettings.getInstance();
        AppSettings settings2 = AppSettings.getInstance();

        System.out.println(settings1 == settings2);  // true (same object!)
        System.out.println(settings1.getApikey());
        System.out.println(settings2.getApikey());
    }
}

// Singleton Pattern Goal

/*

ðŸ”‘ Singleton Pattern Goal
A Singleton ensures that only one object of a class is created in the entire application and provides a global point of access to it.


ðŸ“Œ Step 1: Private Static Instance
```  private static AppSettings instance; ```

ðŸ”¹ What it does:
    - Declares a class-level variable (static) that will hold the one and only instance of AppSettings.
    - Since itâ€™s private, it cannot be accessed directly from outside the class. Only the class itself can control it.

ðŸ”¹ Why needed:
    - Without this, we would have no way of storing the single object of the class once itâ€™s created.
    - It ensures shared storage â€” no matter how many times you call getInstance(), you will always get the same object stored in this variable.

ðŸ”¹ Related terms:
Static variable â†’ belongs to the class, not objects. Shared across all instances.
Encapsulation â†’ keeping it private enforces that only the class can manage its lifecycle.


ðŸ“Œ Step 2: Private Constructor
```
    private AppSettings() {
        this.databaseUrl = "jdbc:mysql://localhost:3306/mydb";
        this.apiKey = "12345-ABCDE";
    }
```
ðŸ”¹ What it does:
    - Stops anyone from using new AppSettings() outside the class.
    - Initializes default settings (database URL, API key).

ðŸ”¹ Why needed:
    - If the constructor were public, other classes could freely create new AppSettings(), which would break the Singleton principle by allowing multiple objects.

ðŸ”¹ Related terms:
Constructor â†’ special method that creates an object of the class.
Access modifier (private) â†’ restricts access only to the class itself.
Encapsulation â†’ ensures controlled object creation.


ðŸ“Œ Step 3: Public Static Method (getInstance)
```
    public static AppSettings getInstance() {
        if (instance == null) {
            instance = new AppSettings();
        }
        return instance;
    }
```
ðŸ”¹ What it does:
Checks if the instance already exists:
    - If not created yet (null), it creates a new one.
    - If already exists, it simply returns the existing one.

ðŸ”¹ Why needed:
    - This provides a global point of access to the Singleton object.
    - All other classes call AppSettings.getInstance() to use the object.
    - Guarantees lazy initialization â†’ the object is created only when needed, not before.

ðŸ”¹ Related terms:
Lazy Initialization â†’ object is created only when itâ€™s first needed.
Global Access Point â†’ same method gives the same object everywhere.
Thread Safety Concern â†’ in multithreaded environments, you may need synchronization here to prevent multiple objects being created.



ðŸŽ¯ Putting It All Together
step1 : Private static instance â†’ stores the one object.
step2 : Private constructor â†’ prevents outside code from creating new objects.
step3 : Public static method â†’ controls access, ensures only one object is created and reused.


âœ… End Result:
Only one AppSettings object exists in the application, and all parts of the program use the same configuration settings consistently.
 */


/*
âœ… Valid way to prevent cloning in Singleton:
@Override
protected Object clone() throws CloneNotSupportedException {
    throw new CloneNotSupportedException("Cloning of this singleton is not allowed");
}

ðŸ”Ž Why this works?
    - By default, Object.clone() creates a new copy of the object, which breaks Singleton.
    - Overriding it and throwing CloneNotSupportedException ensures no new copy is created.
    - This way, the Singleton object is preserved.

 */
